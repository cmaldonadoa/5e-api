type ClassesClassOptionalfeatureProgressionProgression {
_1: Int
_2: Int
_3: Int
_4: Int
_5: Int
_6: Int
_7: Int
_8: Int
_9: Int
_10: Int
_11: Int
_12: Int
_13: Int
_14: Int
_15: Int
_16: Int
_17: Int
_18: Int
_19: Int
_20: Int
}

type ClassesClassOptionalfeatureProgression {
name: String
featureType: [String]
progression: ClassesClassOptionalfeatureProgressionProgression
}

type ClassesClassStartingProficienciesArmor {
light: Boolean
medium: Boolean
{@item shield|phb|shields}: Boolean
proficiency: String
full: String
heavy: Boolean
}

type ClassesClassStartingProficienciesWeapons {
simple: Boolean
proficiency: String
optional: Boolean
martial: Boolean
{@item hand crossbow|phb|hand crossbows}: Boolean
{@item longsword|phb|longswords}: Boolean
{@item rapier|phb|rapiers}: Boolean
{@item shortsword|phb|shortswords}: Boolean
{@item club|phb|clubs}: Boolean
{@item dagger|phb|daggers}: Boolean
{@item dart|phb|darts}: Boolean
{@item javelin|phb|javelins}: Boolean
{@item mace|phb|maces}: Boolean
{@item quarterstaff|phb|quarterstaffs}: Boolean
{@item scimitar|phb|scimitars}: Boolean
{@item sickle|phb|sickles}: Boolean
{@item sling|phb|slings}: Boolean
{@item spear|phb|spears}: Boolean
{@item light crossbow|phb|light crossbows}: Boolean
}

type ClassesClassStartingProficienciesTools {
{@item thieves' tools|PHB}: Boolean
{@item tinker's tools|PHB}: Boolean
anyArtisans: Int
anyMusical: Int
{@item Herbalism kit|PHB}: Boolean
choose: ClassesClassStartingProficienciesToolsChoose
}

type ClassesClassStartingProficienciesSkillsChoose {
from: [String]
count: Int
}

type ClassesClassStartingProficienciesSkills {
choose: ClassesClassStartingProficienciesSkillsChoose
any: Int
}

type ClassesClassStartingProficiencies {
armor: [ClassesClassStartingProficienciesArmor]
weapons: [ClassesClassStartingProficienciesWeapons]
tools: [ClassesClassStartingProficienciesTools]
skills: [ClassesClassStartingProficienciesSkills]
}

type ClassesClassStartingEquipment_ {
filter: String
quantity: Int
item: String
}

type ClassesClassStartingEquipmentA {
item: String
quantity: Int
filter: String
}

type ClassesClassStartingEquipmentB {
item: String
filter: String
quantity: Int
}

type ClassesClassStartingEquipment {
_: [ClassesClassStartingEquipment_]
a: [ClassesClassStartingEquipmentA]
b: [ClassesClassStartingEquipmentB]
c: [ClassesClassStartingEquipmentC]
}

type ClassesClassMulticlassingRequirements {
int: Int
str: Int
cha: Int
wis: Int
or: [ClassesClassMulticlassingRequirementsOr]
dex: Int
}

type ClassesClassMulticlassingProficienciesGained {
armor: [String]
tools: [String]
weapons: [String]
skills: [ClassesClassMulticlassingProficienciesGainedSkills]
}

type ClassesClassMulticlassing {
requirements: ClassesClassMulticlassingRequirements
proficienciesGained: ClassesClassMulticlassingProficienciesGained
}

type ClassesClassClassTableGroupsRows {
_0: String
_1: String
_2: String
_3: String
_4: String
_5: String
_6: String
_7: String
_8: String
}

type ClassesClassClassTableGroupsRowsList {
items: [ClassesClassClassTableGroupsRows]
}

type ClassesClassClassTableGroups {
colLabels: [String]
rows: [ClassesClassClassTableGroupsRowsList]
title: String
}

type ClassesClassClassFeatures {
classFeature: String
tableDisplayName: String
}

type ClassesClass {
name: String
source: String
hitDie: String
savingThrowProficiencies: [String]
spellcastingAbility: String
casterProgression: String
preparedSpellsFormula: String
cantripsKnownProgression: [Int]
optionalfeatureProgression: [ClassesClassOptionalfeatureProgression]
startingProficiencies: ClassesClassStartingProficiencies
startingEquipment: [ClassesClassStartingEquipment]
multiclassing: ClassesClassMulticlassing
classTableGroups: [ClassesClassClassTableGroups]
classFeatures: [ClassesClassClassFeatures]
subclassTitle: String
spellsKnownProgression: [Int]
additionalSpells: [ClassesClassAdditionalSpells]
spellsKnownProgressionFixedByLevel: ClassesClassSpellsKnownProgressionFixedByLevel
}

type ClassesSubclass {
name: String
source: String
shortName: String
className: String
classSource: String
subclassFeatures: [String]
additionalSpells: [ClassesSubclassAdditionalSpells]
spellcastingAbility: String
optionalfeatureProgression: [ClassesSubclassOptionalfeatureProgression]
casterProgression: String
cantripsKnownProgression: [Int]
spellsKnownProgression: [Int]
subclassTableGroups: [ClassesSubclassSubclassTableGroups]
}

type Classes {
class: [ClassesClass]
subclass: [ClassesSubclass]
}

type ClassesSubclassAdditionalSpellsSpellsItem {
beast sense: Boolean
speak with animals: Boolean
commune with nature: Boolean
augury: Boolean
clairvoyance: Boolean
choose: ClassesSubclassAdditionalSpellsSpellsItemChoose
command: Boolean
guidance: Boolean
light: Boolean
spare the dying: Boolean
alter self: Boolean
chill touch: Boolean
prestidigitation: Boolean
druidcraft: Boolean
darkness: Boolean
darkvision: Boolean
pass without trace: Boolean
silence: Boolean
minor illusion: Boolean
sanctuary: Boolean
burning hands: Boolean
disguise self: Boolean
rope trick: Boolean
fear: Boolean
greater invisibility: Boolean
seeming: Boolean
protection from evil and good: Boolean
misty step: Boolean
haste: Boolean
banishment: Boolean
teleportation circle: Boolean
zone of truth: Boolean
magic circle: Boolean
hold monster: Boolean
charm person: Boolean
dispel magic: Boolean
dimension door: Boolean
mislead: Boolean
mage hand: Boolean
faerie fire: Boolean
web: Boolean
gaseous form: Boolean
arcane eye: Boolean
insect plague: Boolean
thaumaturgy: Boolean
cure wounds: Boolean
inflict wounds: Boolean
bless: Boolean
bane: Boolean
mind sliver|tce: Boolean
arms of Hadar: Boolean
dissonant whispers: Boolean
calm emotions: Boolean
detect thoughts: Boolean
hunger of Hadar: Boolean
sending: Boolean
Evard's black tentacles: Boolean
summon aberration|TCE: Boolean
Rary's telepathic bond: Boolean
telekinesis: Boolean
alarm: Boolean
aid: Boolean
lesser restoration: Boolean
protection from energy: Boolean
freedom of movement: Boolean
summon construct|TCE: Boolean
greater restoration: Boolean
wall of force: Boolean
sacred flame: Boolean
}

type ClassesSubclassAdditionalSpellsSpells_meta {
level: Int
ritual: Boolean
longRest: Int
}

type ClassesSubclassAdditionalSpellsSpells {
item: ClassesSubclassAdditionalSpellsSpellsItem
_meta: ClassesSubclassAdditionalSpellsSpells_meta
}

type ClassesSubclassAdditionalSpells {
spells: [ClassesSubclassAdditionalSpellsSpells]
name: String
prepared: ClassesSubclassAdditionalSpellsPrepared
expandedFilter: ClassesSubclassAdditionalSpellsExpandedFilter
expanded: ClassesSubclassAdditionalSpellsExpanded
}

type ClassesClassStartingEquipmentC {
filter: String
item: String
}

type ClassesClassMulticlassingProficienciesGainedSkillsChoose {
from: [String]
count: Int
}

type ClassesClassMulticlassingProficienciesGainedSkills {
choose: ClassesClassMulticlassingProficienciesGainedSkillsChoose
}

type ClassesClassAdditionalSpellsSpellsItemChoose {
fromFilter: String
count: Int
}

type ClassesClassAdditionalSpellsSpellsItem {
choose: ClassesClassAdditionalSpellsSpellsItemChoose
}

type ClassesClassAdditionalSpellsSpells_meta {
level: Int
}

type ClassesClassAdditionalSpellsSpells {
item: ClassesClassAdditionalSpellsSpellsItem
_meta: ClassesClassAdditionalSpellsSpells_meta
}

type ClassesClassAdditionalSpells {
name: String
spells: [ClassesClassAdditionalSpellsSpells]
}

type ClassesSubclassAdditionalSpellsSpellsItemChoose {
fromFilter: String
count: Int
}

type ClassesSubclassAdditionalSpellsPrepared {
_3: [String]
_5: [String]
_7: [String]
_9: [String]
}

type ClassesClassMulticlassingRequirementsOr {
str: Int
dex: Int
}

type ClassesSubclassOptionalfeatureProgressionProgression {
_3: Int
_7: Int
_10: Int
_15: Int
_18: Int
_6: Int
_11: Int
_17: Int
}

type ClassesSubclassOptionalfeatureProgression {
name: String
featureType: [String]
progression: ClassesSubclassOptionalfeatureProgressionProgression
}

type ClassesSubclassSubclassTableGroupsRows {
_0: String
_1: String
_2: String
_3: String
}

type ClassesSubclassSubclassTableGroupsRowsList {
items: [ClassesSubclassSubclassTableGroupsRows]
}

type ClassesSubclassSubclassTableGroups {
colLabels: [String]
rows: [ClassesSubclassSubclassTableGroupsRowsList]
title: String
}

type ClassesClassStartingProficienciesToolsChoose {
from: [String]
count: Int
}

type ClassesSubclassAdditionalSpellsExpandedFilter {
s0: [String]
s1: [String]
s2: [String]
s3: [String]
s4: [String]
s5: [String]
s6: [String]
s7: [String]
s8: [String]
s9: [String]
}

type ClassesClassSpellsKnownProgressionFixedByLevel11 {
_6: Int
}

type ClassesClassSpellsKnownProgressionFixedByLevel13 {
_7: Int
}

type ClassesClassSpellsKnownProgressionFixedByLevel15 {
_8: Int
}

type ClassesClassSpellsKnownProgressionFixedByLevel17 {
_9: Int
}

type ClassesClassSpellsKnownProgressionFixedByLevel {
_11: ClassesClassSpellsKnownProgressionFixedByLevel11
_13: ClassesClassSpellsKnownProgressionFixedByLevel13
_15: ClassesClassSpellsKnownProgressionFixedByLevel15
_17: ClassesClassSpellsKnownProgressionFixedByLevel17
}

type ClassesSubclassAdditionalSpellsExpanded {
_9: [String]
s1: [String]
s2: [String]
s3: [String]
s4: [String]
s5: [String]
}