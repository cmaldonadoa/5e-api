type Feat {
name: String
source: String
prerequisite: FeatPrerequisite
ability: FeatAbility
additionalSpells: [FeatAdditionalSpells]
entries: [FeatEntries]
toolProficiencies: FeatToolProficiencies
optionalFeatureProgression: [FeatOptionalFeatureProgression]
languageProficiencies: FeatLanguageProficiencies
weaponProficiencies: FeatWeaponProficiencies
armorProficiencies: FeatArmorProficiencies
skillProficiencies: FeatSkillProficiencies
savingThrowProficiencies: FeatSavingThrowProficiencies
expertise: FeatExpertise
skillToolLanguageProficiencies: FeatSkillToolLanguageProficiencies
}

type FeatAbility {
items: [String]
choose: FeatAbilityChoose
}

type FeatAbilityChoose {
from: [String]
count: Int
}

type FeatPrerequisite {
other: String
race: [FeatPrerequisiteRace]
ability: [FeatPrerequisiteAbility]
spellcasting2020: Boolean
spellcasting: Boolean
proficiency: [FeatPrerequisiteProficiency]
level: Int
feat: [String]
}

type FeatPrerequisiteProficiency {
weapon: String
armor: String
}

type FeatPrerequisiteAbility {
dex: Int
str: Int
cha: Int
int: Int
wis: Int
}

type FeatPrerequisiteRace {
name: String
subrace: String
displayEntry: String
}

type FeatAdditionalSpells {
spellcastingAbility: FeatAdditionalSpellsSpellcastingAbility
spells: [FeatAdditionalSpellsSpells]
name: String
}

type FeatAdditionalSpellsSpells {
choose: FeatAdditionalSpellsSpellsChoose
_meta: FeatAdditionalSpellsSpells_meta
item: String
}

type FeatAdditionalSpellsSpellsChoose {
fromFilter: String
count: Int
from: [String]
}

type FeatAdditionalSpellsSpellcastingAbility {
items: [String]
choose: FeatAdditionalSpellsSpellcastingAbilityChoose
}

type FeatAdditionalSpellsSpellcastingAbilityChoose {
from: [String]
count: Int
}

type FeatEntries {
type: String
entry: String
id: Int
items: [FeatEntriesItems]
caption: String
colLabels: [String]
colStyles: [String]
rows: [FeatEntriesRowsList]
children: [Int]
parentId: Int
name: String
style: String
}

type FeatEntriesItems {
type: String
entry: String
name: String
entries: [FeatEntriesItemsEntries]
}

type FeatEntriesItemsEntries {
type: String
entry: String
}

type FeatAdditionalSpellsSpells_meta {
shortRest: Int
longRest: Int
will: Boolean
ritual: Boolean
}

type FeatEntriesRows {
_0: String
_1: String
_2: String
}

type FeatEntriesRowsList {
items: [FeatEntriesRows]
}

type FeatToolProficiencies {
items: [String]
}

type FeatOptionalFeatureProgression {
name: String
featureType: [String]
progression: FeatOptionalFeatureProgressionProgression
}

type FeatOptionalFeatureProgressionProgression {
_: Int
}

type FeatLanguageProficiencies {
items: [String]
}

type FeatWeaponProficiencies {
items: [String]
choose: FeatWeaponProficienciesChoose
}

type FeatWeaponProficienciesChoose {
fromFilter: String
count: Int
}

type FeatArmorProficiencies {
items: [String]
}

type FeatSkillProficiencies {
choose: FeatSkillProficienciesChoose
}

type FeatSkillProficienciesChoose {
from: [String]
count: Int
}

type FeatSavingThrowProficiencies {
choose: FeatSavingThrowProficienciesChoose
}

type FeatSavingThrowProficienciesChoose {
from: [String]
count: Int
}

type FeatExpertise {
items: [String]
}

type FeatSkillToolLanguageProficiencies {
choose: FeatSkillToolLanguageProficienciesChoose
}

type FeatSkillToolLanguageProficienciesChoose {
from: [String]
count: Int
}