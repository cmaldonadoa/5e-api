type Character {
    owner: String!
    name: String!
    abilityScores: CharacterAbilityScores!
    raceName: String
    raceSource: String
    subraceName: String
    subraceSource: String
    classes: [CharacterClass!]!
    backgroundName: String
    spells: [CharacterSpell!]!
    proficiencies: CharacterProficiencies!
    expertises: CharacterProficiencies!
    hitPointMaximum: Int
    hitPointCurrent: Int
    items: [CharacterItem!]!
    coins: CharacterCoins!
    features: [CharacterFeature!]
    initiative: Int
    speed: CharacterSpeed!
    armorClass: Int
    proficiencyBonus: Int
    chosenOptions: [CharacterChosenOption!]!
    spellcastingSlots: CharacterSpellSlots!
    pactMagicSlots: CharacterSpellSlots!
    resources: [CharacterResource!]!
}

type CharacterItem {
    id: ID!
    refId: ID
    name: String!
    sourceType: CharacterDataSource
    sourceText: String
    customDescription: String
    isBaseItem: Boolean!
    quantity: Int!
    displayName: String
    worthValue: Int
}

input CharacterItemInput {
    id: ID
    name: String
    sourceType: CharacterDataSource
    sourceText: String
    customDescription: String
    quantity: Int
    displayName: String
    worthValue: Int
}

type CharacterSpell {
    id: ID!
    refId: ID
    name: String!
    level: Int
    school: String
    time: CharacterSpellTime
    range: CharacterSpellRange
    components: CharacterSpellComponents
    duration: CharacterSpellDuration
    entries: [CharacterEntries!]
    higherLevel: [CharacterEntries!]
    ritual: Boolean
    prepared: Boolean
    sourceType: CharacterDataSource
    sourceText: String
    spellcastingAbility: String
    _meta: CharacterSpellMeta
}

type CharacterSpellTime {
    number: Int
    unit: String
    condition: String
}

type CharacterSpellRange {
    type: String
    distance: CharacterSpellRangeDistance
}

type CharacterSpellRangeDistance {
    type: String
    distance: Int
}

type CharacterSpellDuration {
    type: String
    duration: String
    concentration: Boolean
}

type CharacterSpellComponents {
    s: Boolean
    v: Boolean
    m: String
}

type CharacterSpellMeta {
    longRest: Int
    shortRest: Int
    will: Boolean
    consumeType: String
    consumeAmount: Int
}

input CharacterSpellInput {
    id: ID
    name: String
    level: Int
    school: String
    time: CharacterSpellTimeInput
    range: CharacterSpellRangeInput
    components: CharacterSpellComponentsInput
    duration: CharacterSpellDurationInput
    entries: [CharacterEntriesInput!]
    higherLevel: [CharacterEntriesInput!]
    ritual: Boolean
    prepared: Boolean
    sourceType: CharacterDataSource
    sourceText: String
    spellcastingAbility: String
    _meta: CharacterSpellMetaInput
}

input CharacterSpellTimeInput {
    number: Int
    unit: String
    condition: String
}

input CharacterSpellRangeInput {
    type: String
    distance: CharacterSpellRangeDistanceInput
}

input CharacterSpellRangeDistanceInput {
    type: String
    distance: Int
}

input CharacterSpellDurationInput {
    type: String
    duration: String
    concentration: Boolean
}

input CharacterSpellComponentsInput {
    s: Boolean
    v: Boolean
    m: String
}

input CharacterSpellMetaInput {
    longRest: Int
    shortRest: Int
    will: Boolean
    consumeType: String
    consumeAmount: Int
}

type CharacterAbilityScores {
    str: [CharacterAbilityScore!]!
    dex: [CharacterAbilityScore!]!
    con: [CharacterAbilityScore!]!
    int: [CharacterAbilityScore!]!
    wis: [CharacterAbilityScore!]!
    cha: [CharacterAbilityScore!]!
}

type CharacterAbilityScore {
    id: ID!
    refId: ID
    value: Int!
    sourceType: CharacterDataSource
    sourceText: String
}

input CharacterAbilityScoresInput {
    str: CharacterAbilityScoreInput
    dex: CharacterAbilityScoreInput
    con: CharacterAbilityScoreInput
    int: CharacterAbilityScoreInput
    wis: CharacterAbilityScoreInput
    cha: CharacterAbilityScoreInput
}

input CharacterAbilityScoreInput {
    id: ID
    value: Int
    sourceType: CharacterDataSource
    sourceText: String
}

type CharacterProficiencies {
    armor: [CharacterProficiency!]!
    weapon: [CharacterProficiency!]!
    language: [CharacterProficiency!]!
    tool: [CharacterProficiency!]!
    savingThrow: [CharacterProficiency!]!
    skill: [CharacterProficiency!]!
}

type CharacterProficiency {
    id: ID!
    refId: ID
    name: String!
    sourceType: CharacterDataSource
    sourceText: String
}

input CharacterProficienciesInput {
    armor: [CharacterProficiencyInput!]
    weapon: [CharacterProficiencyInput!]
    language: [CharacterProficiencyInput!]
    tool: [CharacterProficiencyInput!]
    savingThrow: [CharacterProficiencyInput!]
    skill: [CharacterProficiencyInput!]
}

input CharacterProficiencyInput {
    id: ID
    name: String
    sourceType: CharacterDataSource
    sourceText: String
}

type CharacterClass {
    name: String!
    subclassName: String
    level: Int!
    maxHitDice: Int
    usedHitDice: Int
    spellcastingAbility: String
    preparedSpells: Int
    cantripsKnown: Int
    spellsKnown: Int
}

type CharacterCoins {
    cp: Int
    sp: Int
    ep: Int
    gp: Int
    pp: Int
}

input CharacterCoinsInput {
    cp: Int
    sp: Int
    ep: Int
    gp: Int
    pp: Int
}

type CharacterFeature {
    id: ID!
    refId: ID
    entries: [CharacterEntries!]!
    consumeType: String
    consumeAmount: Int
    sourceType: CharacterDataSource
    sourceText: String
}

input CharacterFeatureInput {
    id: ID
    entries: [CharacterEntriesInput!]
    consumeType: String
    consumeAmount: Int
    sourceType: CharacterDataSource
    sourceText: String
}

enum CharacterDataSource {
    BACKGROUND
    RACE
    CLASS
    FEAT
    ITEM
    OTHER
}

type CharacterEntries {
    id: ID!
    refId: ID
    type: String
    style: String
    items: [CharacterEntriesItems]
    internalId: Int!
    name: String
    data: CharacterEntriesData
    children: [Int]
    entry: String
    parentId: Int
    colLabels: [String]
    colStyles: [String]
    rows: [CharacterEntriesRows]
    caption: String
    attributes: [String]
    classFeature: String
    count: Int
    optionalFeature: String
    source: String
    page: Int
    subclassFeature: String
    footnotes: [String]
    tag: String
    by: String
}

input CharacterEntriesInput {
    id: ID
    type: String
    style: String
    items: [CharacterEntriesItemsInput]
    internalId: Int!
    name: String
    data: CharacterEntriesDataInput
    children: [Int]
    entry: String
    parentId: Int
    colLabels: [String]
    colStyles: [String]
    rows: [CharacterEntriesRowsInput]
    caption: String
    attributes: [String]
    classFeature: String
    count: Int
    optionalFeature: String
    source: String
    page: Int
    subclassFeature: String
    footnotes: [String]
    tag: String
    by: String
}

type CharacterEntriesItems {
    type: String
    name: String
    entry: String
    subclassFeature: String
    entries: [CharacterEntriesItemsEntries]
}

input CharacterEntriesItemsInput {
    type: String
    name: String
    entry: String
    subclassFeature: String
    entries: [CharacterEntriesItemsEntriesInput]
}

type CharacterEntriesItemsEntries {
    type: String
    entry: String
}

input CharacterEntriesItemsEntriesInput {
    type: String
    entry: String
}

type CharacterEntriesData {
    isFeature: Boolean
    tableInclude: Boolean
    isRequiredOption: Boolean
}

input CharacterEntriesDataInput {
    isFeature: Boolean
    tableInclude: Boolean
    isRequiredOption: Boolean
}

type CharacterEntriesRows {
    _0: String
    _1: String
    _2: String
    _3: String
    _4: String
    _5: String
}

input CharacterEntriesRowsInput {
    _0: String
    _1: String
    _2: String
    _3: String
    _4: String
    _5: String
}

type CharacterSpeed {
    walk: [CharacterSpeedValue!]
    fly: [CharacterSpeedValue!]
    climb: [CharacterSpeedValue!]
    swim: [CharacterSpeedValue!]
}

type CharacterSpeedValue {
    id: ID!
    refId: ID
    value: Int!,
    sourceType: CharacterDataSource
    sourceText: String
}

input CharacterSpeedInput {
    walk: CharacterSpeedValueInput
    fly: CharacterSpeedValueInput
    climb: CharacterSpeedValueInput
    swim: CharacterSpeedValueInput
}

input CharacterSpeedValueInput {
    id: ID
    value: Int,
    sourceType: CharacterDataSource
    sourceText: String
}

type CharacterChosenOption {
    id: ID!
    refId: ID
    name: String!
    category: String
    consumeType: String
    consumeAmount: Int
}

input CharacterChosenOptionInput {
    name: String!
    category: String
    consumeType: String
    consumeAmount: Int
}

input CharacterFeatInput {
    name: String!
    proficiencies: CharacterProficienciesInput
    expertises: CharacterProficienciesInput
    abilityScores: CharacterAbilityScoresInput
    spellcastingAbility: String
    spells: [CharacterSpellInput!]
    optionalFeatures: [CharacterOptionalFeatureInput!]
}

input CharacterRaceInput {
    name: String!
    source: String!
    proficiencies: CharacterProficienciesInput
    abilityScores: CharacterAbilityScoresInput
    spellcastingAbility: String
    spells: [CharacterSpellInput!]
    feat: CharacterFeatInput
    subrace: CharacterSubraceInput
}

input CharacterSubraceInput {
    name: String!
    source: String!
    proficiencies: CharacterProficienciesInput
    abilityScores: CharacterAbilityScoresInput
    spellcastingAbility: String
    spells: [CharacterSpellInput!]
    feat: CharacterFeatInput
}

input CharacterBackgroundInput {
    name: String!
    proficiencies: CharacterProficienciesInput
    items: [CharacterItemInput!]
    feat: CharacterFeatInput
}

input CharacterOptionalFeatureInput {
    name: String!
    spellcastingAbility: String
    spells: [CharacterSpellInput!]
    sourceType: CharacterDataSource
    sourceText: String
}

input CharacterClassInput {
    name: String!
    startingEquipment: [CharacterItemInput!]
    proficiencies: CharacterProficienciesInput
}

input CharacterSubclassInput {
    className: String!
    name: String!
}

input CharacterLevelUpInput {
    className: String!
    subclassName: String
    spellcastingAbility: String
    addedSpells: [CharacterSpellInput!]
    removedSpells: [ID!]
    addedOptionalFeatures: [CharacterOptionalFeatureInput!]
    removedOptionalFeatures: [ID!]
    abilityScores: CharacterAbilityScoresInput
    feat: CharacterFeatInput
    removedProficiencies: [ID!]
    addedProficiencies: CharacterProficienciesInput
    gainedFeatureNames: [String!]
}

type CharacterSpellSlots {
    _1: [CharacterSpellSlot!]
    _2: [CharacterSpellSlot!]
    _3: [CharacterSpellSlot!]
    _4: [CharacterSpellSlot!]
    _5: [CharacterSpellSlot!]
    _6: [CharacterSpellSlot!]
    _7: [CharacterSpellSlot!]
    _8: [CharacterSpellSlot!]
    _9: [CharacterSpellSlot!]
}

type CharacterSpellSlot {
    id: ID!
    refId: ID
    amount: Int!
    sourceType: CharacterDataSource
    sourceText: String
}

input CharacterSpellSlotsInput {
    _1: [CharacterSpellSlotInput!]
    _2: [CharacterSpellSlotInput!]
    _3: [CharacterSpellSlotInput!]
    _4: [CharacterSpellSlotInput!]
    _5: [CharacterSpellSlotInput!]
    _6: [CharacterSpellSlotInput!]
    _7: [CharacterSpellSlotInput!]
    _8: [CharacterSpellSlotInput!]
    _9: [CharacterSpellSlotInput!]
}

input CharacterSpellSlotInput {
    id: ID
    amount: Int
    sourceType: CharacterDataSource
    sourceText: String
}

type CharacterResource {
    type: String!
    used: Int
    items: [CharacterResourceItem!]!
}

type CharacterResourceItem {
    id: ID!
    refId: ID
    amount: Int!
    sourceType: CharacterDataSource
    sourceText: String
}

input CharacterResourceInput {
    type: String!
    used: Int
    items: [CharacterResourceItemInput!]
}

input CharacterResourceItemInput {
    id: ID
    amount: Int
    sourceType: CharacterDataSource
    sourceText: String
}